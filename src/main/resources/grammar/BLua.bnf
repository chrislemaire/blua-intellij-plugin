{
  parserClass="nl.clemaire.plugins.blua.parser.BLuaParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  extends(".*expr")=expr
  extends(".*stmt")=statement
  extends(".*type")=type

  consumeTokenMethod(".*_expr|expr")="consumeTokenFast"

  psiClassPrefix="BLua"
  psiImplClassSuffix="Impl"
  psiPackage="nl.clemaire.plugins.blua.ast"
  psiImplPackage="nl.clemaire.plugins.blua.ast.impl"
  psiImplUtilClass="nl.clemaire.plugins.blua.ast.BLuaUtil"

  elementTypeHolderClass="nl.clemaire.plugins.blua.ast.BLuaTypes"
  elementTypeClass="nl.clemaire.plugins.blua.ast.BLuaElementType"
  tokenTypeClass="nl.clemaire.plugins.blua.ast.BLuaTokenType"

  tokens=[
    EOL="regexp:\r\n|\r|\n"
    WHITE_SPACE="regexp:[ \t\x0B\f]+"

    LINE_COMMENT="regexp:[\-]{2}[^\r\n]*"
    BLOCK_COMMENT="regexp:[\-]{2}\[{2}.*]{2}+[\-]{2}"

    OPERATOR="regexp:(<=|>=|==|~=|not|and|or|\.\.|[+\-*/%<>]|\^)"
    SYNTAX_SYMBOL="regexp:(\.{3}|[;:=,.])"
    SYNTAX_KEYWORD="regexp:(local|return|break|function|if|else|elseif|while|for|in|do|repeat|until|end|table|with|extending)"

    C_SQR_OPEN="regexp:[\[]"
    C_SQR_CLOSE="regexp:[\]]"

    C_PAR_OPEN="regexp:[(]"
    C_PAR_CLOSE="regexp:[)]"

    C_MUST_OPEN="regexp:[{]"
    C_MUST_CLOSE="regexp:[}]"

    ID_TOKEN="regexp:(!(<=|>=|==|~=|not|and|or|\.\.|[+\-*/%<>0-9]|\^)\S*)|((<=|>=|==|~=|not|and|or|\.\.|[+\-*/%<>]|\^)\S+)"
    INT="regexp:(0|[1-9][0-9]*)"
    DOUBLE="regexp:((0|[1-9][0-9]*)\.[0-9]+)"

    TRUE="true"
    FALSE="false"

    STD_TYPE_TOKEN="(Int|Double|Byte|Char|String|Bool)"

    STRING_LITERAL="regexp:\"[^\"\n\r]*\""
  ]
}

bluaFile ::=
    [module EOL+ WS]
    {require EOL+ WS}*
    WS {statement semi+ WS}*

// A block of statements. A block is usually encased in a scope.
block ::= WS {statement semi+ WS}* [last_statement semi+ WS]

// Module declaration to be placed at the very start of a file
module ::= "module" qualified_id ["exports" "(" {ID_TOKEN {"," WS ID_TOKEN}*}? ")"]

// Require statements to be placed at the start of a file
require ::= "require" qualified_id ["as" ID_TOKEN]

// Normal statements and the last statement in a block summed up.
// The last statement in a block cannot be executed in the middle of block because
// of the interruption it gives to control flow. Preventing these cases is easier
// than checking for unreachable points later.
private statement_recover ::= !(semi)

last_statement ::= return_stmt | break_stmt {recoverWhile=statement_recover}
statement ::=
      named_function_stmt
    | decl_stmt
    | assign_stmt
    | class_decl_stmt
    | block_stmt
    | while_stmt
    | repeat_stmt
    | if_stmt
    | for_stmt
    | foreach_stmt
    | expr_stmt {recoverWhile=statement_recover}

// Block statement for creating a new scope
block_stmt ::= "do" block "end" {pin=1}

// Control flow execution statements
while_stmt ::= "while" expr "do" block "end" {pin=1}
repeat_stmt ::= "repeat" block "until" expr {pin=1}

for_stmt ::= "for" typed_id "=" WS expr "," WS expr ["," WS expr] "do" block "end" {pin=3}
foreach_stmt ::= "for" typed_ids "in" exprs "do" block "end" {pin=3}

if_stmt ::= "if" expr "then" block
             {"elseif" expr "then" block}*
             ["else" block] "end" {pin=1}

// Control flow interruption statements
return_stmt ::= "return" [exprs] {pin=1}
break_stmt ::= "break"

// Assigning existing or new variables
decl_stmt ::= "local" vars
assign_stmt ::= ["local"] vars "=" exprs
{
    mixin="nl.clemaire.plugins.blua.ast.mixin.stmt.BLuaAssignStmtMixin"
    implements="nl.clemaire.plugins.blua.ast.ext.stmt.BLuaAssignStmtExt"
}

// Class statement, for declaring a new class
class_decl_stmt ::= "class" ID_TOKEN [extends] {with}* class_body "end"
{
    mixin="nl.clemaire.plugins.blua.ast.mixin.stmt.BLuaClassDeclStmtMixin"
    implements="nl.clemaire.plugins.blua.ast.ext.stmt.BLuaClassDeclStmtExt"
}

extends ::= "extending" ID_TOKEN
with ::= "with" ID_TOKEN

// Expression statement, executing an expression as a statement is always allowed, but not always effectful
expr_stmt ::= var_expr function_call_expr

// Named function statement
named_function_stmt ::= ["local"] "function" ID_TOKEN "(" [params] ")" [":" type] block "end"
{
    pin=2
    mixin="nl.clemaire.plugins.blua.ast.mixin.stmt.BLuaNamedFunctionStmtMixin"
    implements="nl.clemaire.plugins.blua.ast.ext.stmt.BLuaNamedFunctionStmtExt"
}

// Class body, fields, methods, etc.
class_body ::= WS {{field | method} semi+ WS}*
field ::= ["local"] ID_TOKEN [":" type] ["=" expr]
{
    mixin="nl.clemaire.plugins.blua.ast.mixin.misc.BLuaFieldMixin"
    implements="nl.clemaire.plugins.blua.ast.ext.misc.BLuaFieldExt"
}

method ::= named_function_stmt

// An expression, this could be any expression under the ordered groups.
// The groups underneath are ordered in reverse precedence order.
private expr_recover ::=
    !(semi|">"|">="|"<"|"<="|"=="|"~="|".."|"+"|"-"|"/"|"*"|"%"|"^"|"."|","|")"|"and"|"or"|"not") &
    statement_recover

expr ::=
      or_group
    | and_group
    | cmp_group
    | concat_group
    | sum_group
    | mul_group
    | unary_group
    | exp_group
    | prefix_group
    | func_group
    | table_group
    | prim_group {recoverWhile=expr_recover}

// The expression groups, these determine operator precedence
private or_group ::= or_expr
private and_group ::= and_expr
private cmp_group ::= lt_expr | lte_expr | gt_expr | gte_expr | eq_expr | neq_expr
private concat_group ::= concat_expr
private sum_group ::= plus_expr | minus_expr
private mul_group ::= mul_expr | div_expr | mod_expr
private unary_group ::= not_expr | minus_expr
private exp_group ::= exp_expr
private prefix_group ::= prefix_expr
private func_group ::= function_expr | lambda_expr
private table_group ::= table_expr
private prim_group ::= int_expr | double_expr | string_expr | bool_expr

//// The actual expressions

// Boolean expressions, those consisting of logical statements such as and, or, not
or_expr ::= expr "or" expr {pin=2}
and_expr ::= expr "and" expr {pin=2}
not_expr ::= "not" expr {pin=1}

// Comparator expressions, these consist of comparing comparable entities
lt_expr ::= expr "<" expr {pin=2}
lte_expr ::= expr "<=" expr {pin=2}
gt_expr ::= expr ">" expr {pin=2}
gte_expr ::= expr ">=" expr {pin=2}
eq_expr ::= expr "==" expr {pin=2}
neq_expr ::= expr "~=" expr {pin=2}

// Concatenation expression for strings
concat_expr ::= expr ".." expr {pin=2 rightAssociative=true}

// Number expressions, for adding, multiplying and taking the power of numbers
plus_expr ::= expr "+" expr {pin=2}
minus_expr ::= expr "-" expr {pin=2}

mul_expr ::= expr "*" expr {pin=2}
div_expr ::= expr "/" expr {pin=2}
mod_expr ::= expr "%" expr {pin=2}

exp_expr ::= expr "^" expr {pin=2 rightAssociative=true}

// Prefix expressions, these can appear before a function call
prefix_expr ::=
    { var_ref_expr
    | par_expr } prefix_expr_right*
private prefix_expr_right ::=
      index_tab_expr
    | index_dot_expr
    | function_call_expr

// Variable expressions, these all resolve to some variable that can be changes. Also part of the prefix group
var_expr ::=
    { var_ref_expr | par_expr } var_leftover
    | typed_id

private var_leftover ::=
      { index_dot_expr | index_tab_expr | function_call_expr } var_leftover
    | { index_dot_expr | index_tab_expr }

var_ref_expr ::= ID_TOKEN
{
    mixin="nl.clemaire.plugins.blua.ast.mixin.misc.BLuaVarRefMixin"
    implements="nl.clemaire.plugins.blua.ast.ext.misc.BLuaVarRefExt"
}

par_expr ::= "(" expr ")"

function_call_expr ::= args
index_tab_expr ::= "[" expr "]"
index_dot_expr ::= "." var_ref_expr

// Anonymous function expressions, these are lambdas
function_expr ::= "function" "(" [params] ")" block "end"
{
    pin=1
    mixin="nl.clemaire.plugins.blua.ast.mixin.expr.BLuaFunctionExprMixin"
    implements="nl.clemaire.plugins.blua.ast.ext.expr.BLuaFunctionExprExt"
}
lambda_expr ::= "(" [params] ")" "=>" block
{
    pin=1
    mixin="nl.clemaire.plugins.blua.ast.mixin.expr.BLuaFunctionExprMixin"
    implements="nl.clemaire.plugins.blua.ast.ext.expr.BLuaFunctionExprExt"
}

// Table expression, constructs a table with named fields
table_expr ::= "{" table_fields "}"

// Primitive expressions, basically literals
int_expr ::= INT
double_expr ::= DOUBLE
string_expr ::= STRING_LITERAL
bool_expr ::= TRUE | FALSE

// Types, similarly defined to Kotlin/Scala types, using postfix colon, so as to be able to make types implicit later
private type_decl ::= ":" type

type ::=
      record_type_group
    | array_type_group
    | std_type_group
    | class_type_group

private record_type_group ::= record_type
private array_type_group ::= array_type
private std_type_group ::= std_type
private class_type_group ::= class_type

// 'Record' types, special syntax for unnamed tables, containing simple data
record_type ::= "table" "{" {ID_TOKEN type_decl}* "}"

// 'Array' types, special syntax using square brackets after initial type name
array_type ::= type "[" "]"

// 'Primitive' types, including String
std_type ::= STD_TYPE_TOKEN

// 'Primitive' types, including String
class_type ::= ID_TOKEN

// Utility lists and argument collections
par_args ::= "(" [exprs] ")" {extends=args}
string_args ::= string_expr {extends=args}

args ::= par_args | string_args // TODO: table_constructor
vars ::= var_expr {"," var_expr}*

// The parameters to a function invocation
params ::= param {"," param}* ["," WS "..."] | "..."
{
    mixin="nl.clemaire.plugins.blua.ast.mixin.misc.BLuaParamsMixin"
    implements="nl.clemaire.plugins.blua.ast.ext.misc.BLuaParamsExt"
}
param ::= ID_TOKEN type_decl
{
    mixin="nl.clemaire.plugins.blua.ast.mixin.misc.BLuaParamMixin"
    implements="nl.clemaire.plugins.blua.ast.ext.misc.BLuaParamExt"
}

typed_ids ::= typed_id {"," typed_id}*
exprs ::= {expr ","}* expr

// Table fields can be defined with array accessors or by simple ids
table_fields ::= {table_field field_sep}* [table_field]
table_field ::=
      "[" expr "]" "=" expr
    | ID_TOKEN "=" expr
//    | expr   // Disallow table fields being just expressions

// Qualified identifier tokens can have prefixed module names
qualified_id ::= {ID_TOKEN "."}* ID_TOKEN

// A name that is declared for the first time and represents a typed variable from now on
typed_id ::= ID_TOKEN [type_decl]
{
    mixin="nl.clemaire.plugins.blua.ast.mixin.misc.BLuaTypedIdMixin"
    implements="nl.clemaire.plugins.blua.ast.ext.misc.BLuaTypedIdExt"
}

// End-of-line and semicolon tokens for separating statements
private field_sep ::= ";" | ","
private semi ::= (EOL+|";"+)
private WS ::= EOL*
